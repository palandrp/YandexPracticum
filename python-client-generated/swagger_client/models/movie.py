# coding: utf-8

"""
    Spec

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Movie(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'description': 'str',
        'imdb_rating': 'float',
        'writers': 'list[Writer]',
        'actors': 'list[Actor]',
        'genre': 'list[str]',
        'director': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'imdb_rating': 'imdb_rating',
        'writers': 'writers',
        'actors': 'actors',
        'genre': 'genre',
        'director': 'director'
    }

    def __init__(self, id=None, title=None, description=None, imdb_rating=None, writers=None, actors=None, genre=None, director=None):  # noqa: E501
        """Movie - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._description = None
        self._imdb_rating = None
        self._writers = None
        self._actors = None
        self._genre = None
        self._director = None
        self.discriminator = None
        self.id = id
        self.title = title
        if description is not None:
            self.description = description
        if imdb_rating is not None:
            self.imdb_rating = imdb_rating
        if writers is not None:
            self.writers = writers
        if actors is not None:
            self.actors = actors
        if genre is not None:
            self.genre = genre
        if director is not None:
            self.director = director

    @property
    def id(self):
        """Gets the id of this Movie.  # noqa: E501


        :return: The id of this Movie.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Movie.


        :param id: The id of this Movie.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this Movie.  # noqa: E501


        :return: The title of this Movie.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Movie.


        :param title: The title of this Movie.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this Movie.  # noqa: E501


        :return: The description of this Movie.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Movie.


        :param description: The description of this Movie.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def imdb_rating(self):
        """Gets the imdb_rating of this Movie.  # noqa: E501


        :return: The imdb_rating of this Movie.  # noqa: E501
        :rtype: float
        """
        return self._imdb_rating

    @imdb_rating.setter
    def imdb_rating(self, imdb_rating):
        """Sets the imdb_rating of this Movie.


        :param imdb_rating: The imdb_rating of this Movie.  # noqa: E501
        :type: float
        """

        self._imdb_rating = imdb_rating

    @property
    def writers(self):
        """Gets the writers of this Movie.  # noqa: E501


        :return: The writers of this Movie.  # noqa: E501
        :rtype: list[Writer]
        """
        return self._writers

    @writers.setter
    def writers(self, writers):
        """Sets the writers of this Movie.


        :param writers: The writers of this Movie.  # noqa: E501
        :type: list[Writer]
        """

        self._writers = writers

    @property
    def actors(self):
        """Gets the actors of this Movie.  # noqa: E501


        :return: The actors of this Movie.  # noqa: E501
        :rtype: list[Actor]
        """
        return self._actors

    @actors.setter
    def actors(self, actors):
        """Sets the actors of this Movie.


        :param actors: The actors of this Movie.  # noqa: E501
        :type: list[Actor]
        """

        self._actors = actors

    @property
    def genre(self):
        """Gets the genre of this Movie.  # noqa: E501


        :return: The genre of this Movie.  # noqa: E501
        :rtype: list[str]
        """
        return self._genre

    @genre.setter
    def genre(self, genre):
        """Sets the genre of this Movie.


        :param genre: The genre of this Movie.  # noqa: E501
        :type: list[str]
        """

        self._genre = genre

    @property
    def director(self):
        """Gets the director of this Movie.  # noqa: E501


        :return: The director of this Movie.  # noqa: E501
        :rtype: list[str]
        """
        return self._director

    @director.setter
    def director(self, director):
        """Sets the director of this Movie.


        :param director: The director of this Movie.  # noqa: E501
        :type: list[str]
        """

        self._director = director

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Movie, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Movie):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
