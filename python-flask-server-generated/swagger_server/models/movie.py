# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.actor import Actor  # noqa: F401,E501
from swagger_server.models.writer import Writer  # noqa: F401,E501
from swagger_server import util


class Movie(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, title: str=None, description: str=None, imdb_rating: float=None, writers: List[Writer]=None, actors: List[Actor]=None, genre: List[str]=None, director: List[str]=None):  # noqa: E501
        """Movie - a model defined in Swagger

        :param id: The id of this Movie.  # noqa: E501
        :type id: str
        :param title: The title of this Movie.  # noqa: E501
        :type title: str
        :param description: The description of this Movie.  # noqa: E501
        :type description: str
        :param imdb_rating: The imdb_rating of this Movie.  # noqa: E501
        :type imdb_rating: float
        :param writers: The writers of this Movie.  # noqa: E501
        :type writers: List[Writer]
        :param actors: The actors of this Movie.  # noqa: E501
        :type actors: List[Actor]
        :param genre: The genre of this Movie.  # noqa: E501
        :type genre: List[str]
        :param director: The director of this Movie.  # noqa: E501
        :type director: List[str]
        """
        self.swagger_types = {
            'id': str,
            'title': str,
            'description': str,
            'imdb_rating': float,
            'writers': List[Writer],
            'actors': List[Actor],
            'genre': List[str],
            'director': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'description': 'description',
            'imdb_rating': 'imdb_rating',
            'writers': 'writers',
            'actors': 'actors',
            'genre': 'genre',
            'director': 'director'
        }
        self._id = id
        self._title = title
        self._description = description
        self._imdb_rating = imdb_rating
        self._writers = writers
        self._actors = actors
        self._genre = genre
        self._director = director

    @classmethod
    def from_dict(cls, dikt) -> 'Movie':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Movie of this Movie.  # noqa: E501
        :rtype: Movie
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Movie.


        :return: The id of this Movie.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Movie.


        :param id: The id of this Movie.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Movie.


        :return: The title of this Movie.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Movie.


        :param title: The title of this Movie.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this Movie.


        :return: The description of this Movie.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Movie.


        :param description: The description of this Movie.
        :type description: str
        """

        self._description = description

    @property
    def imdb_rating(self) -> float:
        """Gets the imdb_rating of this Movie.


        :return: The imdb_rating of this Movie.
        :rtype: float
        """
        return self._imdb_rating

    @imdb_rating.setter
    def imdb_rating(self, imdb_rating: float):
        """Sets the imdb_rating of this Movie.


        :param imdb_rating: The imdb_rating of this Movie.
        :type imdb_rating: float
        """

        self._imdb_rating = imdb_rating

    @property
    def writers(self) -> List[Writer]:
        """Gets the writers of this Movie.


        :return: The writers of this Movie.
        :rtype: List[Writer]
        """
        return self._writers

    @writers.setter
    def writers(self, writers: List[Writer]):
        """Sets the writers of this Movie.


        :param writers: The writers of this Movie.
        :type writers: List[Writer]
        """

        self._writers = writers

    @property
    def actors(self) -> List[Actor]:
        """Gets the actors of this Movie.


        :return: The actors of this Movie.
        :rtype: List[Actor]
        """
        return self._actors

    @actors.setter
    def actors(self, actors: List[Actor]):
        """Sets the actors of this Movie.


        :param actors: The actors of this Movie.
        :type actors: List[Actor]
        """

        self._actors = actors

    @property
    def genre(self) -> List[str]:
        """Gets the genre of this Movie.


        :return: The genre of this Movie.
        :rtype: List[str]
        """
        return self._genre

    @genre.setter
    def genre(self, genre: List[str]):
        """Sets the genre of this Movie.


        :param genre: The genre of this Movie.
        :type genre: List[str]
        """

        self._genre = genre

    @property
    def director(self) -> List[str]:
        """Gets the director of this Movie.


        :return: The director of this Movie.
        :rtype: List[str]
        """
        return self._director

    @director.setter
    def director(self, director: List[str]):
        """Sets the director of this Movie.


        :param director: The director of this Movie.
        :type director: List[str]
        """

        self._director = director
