# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ShortMovie(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, title: str=None, imdb_rating: float=None):  # noqa: E501
        """ShortMovie - a model defined in Swagger

        :param id: The id of this ShortMovie.  # noqa: E501
        :type id: str
        :param title: The title of this ShortMovie.  # noqa: E501
        :type title: str
        :param imdb_rating: The imdb_rating of this ShortMovie.  # noqa: E501
        :type imdb_rating: float
        """
        self.swagger_types = {
            'id': str,
            'title': str,
            'imdb_rating': float
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'imdb_rating': 'imdb_rating'
        }
        self._id = id
        self._title = title
        self._imdb_rating = imdb_rating

    @classmethod
    def from_dict(cls, dikt) -> 'ShortMovie':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ShortMovie of this ShortMovie.  # noqa: E501
        :rtype: ShortMovie
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ShortMovie.


        :return: The id of this ShortMovie.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ShortMovie.


        :param id: The id of this ShortMovie.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this ShortMovie.


        :return: The title of this ShortMovie.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this ShortMovie.


        :param title: The title of this ShortMovie.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def imdb_rating(self) -> float:
        """Gets the imdb_rating of this ShortMovie.


        :return: The imdb_rating of this ShortMovie.
        :rtype: float
        """
        return self._imdb_rating

    @imdb_rating.setter
    def imdb_rating(self, imdb_rating: float):
        """Sets the imdb_rating of this ShortMovie.


        :param imdb_rating: The imdb_rating of this ShortMovie.
        :type imdb_rating: float
        """

        self._imdb_rating = imdb_rating
